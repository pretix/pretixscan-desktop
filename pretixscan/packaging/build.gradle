import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Adapted from https://github.com/Santulator/Santulator/blob/1.1.0/build.gradle
 * Open Source Software published under the Apache Licence, Version 2.0.
 */
ext {
    publishedVersion = project.version
    bundlerScript = file('build_package.sh')
    appLibraryPath = file("${buildDir}/libraries")
    mainJar = project(':gui').jar.outputs.files[0].name
    bundlePath = file("${buildDir}/bundle")
    extraBundlerArguments = []
    if (operatingSystem.isMacOsX()) {
        packageType = 'pkg'
        appIcon = file('icons/mac/pretixSCAN.icns')
        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('icons/icon.png')
    } else if (operatingSystem.isWindows()) {
        appIcon = file('icons/windows/pretixSCAN.ico')
        bundlerScript = file('build_package.bat')
        generatedNSISFile = file("${buildDir}/resources/main/windows.nsi")
        windowsExecutable = file("${bundlePath}/pretixSCAN/pretixSCAN.exe")
        bundleContent = file("${bundlePath}/pretixSCAN/*")
        // Locations for the DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
        windowsDllDirectory = file('C:\\Windows\\System32')
        windowsDllMSVCP140 = file("${windowsDllDirectory}/MSVCP140.dll")
        windowsDllVCRUNTIME140 = file("${windowsDllDirectory}/VCRUNTIME140.dll")
    }
    if (publishedVersion.endsWith('-SNAPSHOT')) {
        publishedVersion = '0.0.1'
    }
}

task recreateIconMacApp(type: Exec) {
    description 'Regenerate the Mac application icon'
    commandLine 'sh', file('mac-icon.sh'), file('icons/icon.png'), file('icons/mac'), 'pretixSCAN'
}

task recreateIconWindowsApp(type: Exec) {
    description 'Regenerate the Windows application icon'
    commandLine 'sh', file('windows-icon.sh'), file('icons/icon.png'), file('icons/windows'), 'pretixSCAN'
}

task recreateIcons(dependsOn: [recreateIconMacApp, recreateIconWindowsApp]) {
    description 'Regenerate all the application bundle icons'
}

dependencies {
    implementation project(':gui')
}

task copyDependencies(type: Copy) {
    //from configurations.runtime
    into "${buildDir}/libraries"
}

task checkBundlingEnvironment {
    description 'Check the environment for building the installable bundle'
    doLast {
        if (JavaVersion.current() != JavaVersion.VERSION_11) {
            throw new GradleException("You need JDK 11 to build the installable bundle")
        }
        if (project.hasProperty('javafxJmodsPath')) {
            def modsPath = file("${javafxJmodsPath}")

            if (modsPath.exists() && modsPath.isDirectory()) {
                if (!modsPath.list({ d, f -> f ==~ /.*.jmod/ } as FilenameFilter)) {
                    throw new GradleException("JavaFX modules directory '$modsPath' does not contain any '*.jmod' files")
                }
            } else {
                throw new GradleException("JavaFX modules directory '$modsPath' not found")
            }
        } else {
            throw new GradleException("Use -PjavafxJmodsPath=... to specify the directory containing the OpenJFX 11 JMod files")
        }
        if (operatingSystem.isWindows()) {
            def javaHome = System.env.JAVA_HOME

            if (javaHome) {
                def javaExecutable = file("${javaHome}/bin/java.exe")
                def packagerFile = file("${javaHome}/bin/jpackager.exe")
                def jmodFile = file("${javaHome}/jmods/jdk.packager.jar")

                if (!javaExecutable.exists()) {
                    throw new GradleException("Unable to find Java executable '${javaExecutable}'")
                }
                if (!packagerFile.exists()) {
                    throw new GradleException("Unable to find Java packager executable at '${packagerFile}'")
                }
                if (!jmodFile.exists()) {
                    throw new GradleException("Unable to find Java packager module at '${jmodFile}'")
                }
                // Check existence of files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
                if (!windowsDllMSVCP140.exists() || !windowsDllVCRUNTIME140.exists()) {
                    throw new GradleException("Unable to find '${windowsDllMSVCP140}' and '${windowsDllVCRUNTIME140}' (see https://github.com/Santulator/Santulator/issues/5)")
                }
            } else {
                throw new GradleException("JAVA_HOME must be set")
            }
        } else {
            if (project.hasProperty('javaPackagerPath')) {
                def packagerFile = file("${javaPackagerPath}/jpackager")

                if (!packagerFile.exists() || !packagerFile.isFile()) {
                    throw new GradleException("The Java Packager '$packagerFile' is missing")
                }
            } else {
                throw new GradleException("Use -PjavaPackagerPath=... to specify the directory containing the Java Packager")
            }
        }
    }
}

task createBundle(type: Exec, dependsOn: [copyDependencies, processResources, checkBundlingEnvironment]) {
    description 'Build the installable bundle'
    if (operatingSystem.isWindows()) {
        commandLine 'cmd', '/c',
                bundlerScript,
                "${-> javafxJmodsPath}",
                appLibraryPath,
                bundlePath,
                mainJar,
                publishedVersion,
                appIcon
    } else {
        commandLine = ['sh',
                       bundlerScript,
                       "${-> file("${javaPackagerPath}/jpackager")}",
                       packageType,
                       "${-> file("${javafxJmodsPath}")}",
                       appLibraryPath,
                       bundlePath,
                       mainJar,
                       publishedVersion,
                       appIcon,
                       *extraBundlerArguments]
    }
}

if (operatingSystem.isWindows()) {
    processResources {
        filesMatching('windows.nsi') {
            filter ReplaceTokens, tokens: [
                    'bundle.version'     : publishedVersion,
                    'executable.location': windowsExecutable.toString(),
                    'bundle.content'     : bundleContent.toString()
            ]
        }
    }

    task completeNSISSetup(dependsOn: processResources) {
        doLast {
            copy {
                from 'icons/windows'
                into "${bundlePath}/pretixSCAN"
            }
            // Copy files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
            copy {
                from windowsDllMSVCP140
                from windowsDllVCRUNTIME140
                into "${bundlePath}/pretixSCAN"
            }
            println("NSIS Setup file: ${generatedNSISFile}")
        }
    }

    createBundle.finalizedBy completeNSISSetup
}
